name: Integration Test in Tutor
description: "A Github action to test your plugin in Tutor (Open edX distribution)"
inputs:
  app_name:
    description: "Application name to test. E.g., eox-tenant."
    required: true
  tutor_version:
    description: "The tutor version matrix to use."
    required: true
  shell_file_to_run:
    description: "The path of the shell file to run the integration tests."
    required: false
  fixtures_file:
    description: "Optional path to the plugin's fixtures file to load."
    required: false
  extra_requirements:
    description: "Optional requirements to install. You can pass multiple requirements separated by space."
    required: false

runs:
  using: "composite"
  steps:
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Prepare Tutor
      run: |
        pip install "tutor$INPUT_TUTOR_VERSION"
        echo "TUTOR_ROOT=$(pwd)" >> "$GITHUB_ENV"
        echo "TUTOR_PLUGINS_ROOT=$(pwd)/plugins/" >> "$GITHUB_ENV"
        echo "LMS_HOST=local.edly.io" >> "$GITHUB_ENV"
        echo "CMS_HOST=studio.local.edly.io" >> "$GITHUB_ENV"
        tutor config save # Create the config.yml
        chmod 777 . -R
      shell: bash
      env:
        INPUT_TUTOR_VERSION: ${{ inputs.tutor_version }}

    - name: Launch Tutor
      run: |
        tutor config save --set LMS_HOST=$LMS_HOST
        tutor config save --set CMS_HOST=$CMS_HOST
        tutor mounts add lms,cms,lms-worker,cms-worker:$INPUT_APP_NAME:/openedx/$INPUT_APP_NAME
        tutor local launch --non-interactive
        tutor mounts list
      shell: bash
      env:
        INPUT_APP_NAME: ${{ inputs.app_name }}

    - name: Configure Caddyfile
      run: |
        mkdir -p plugins
        cat << 'EOF' > plugins/patches.yml

        name: patches
        patches:
          caddyfile: |
            {$default_site_port} {
              @favicon_matcher {
                path_regexp ^/favicon.ico$
              }
              rewrite @favicon_matcher /theming/asset/images/favicon.ico
              {{ patch("caddyfile-mfe-by-path") }}
              # Limit profile image upload size
              request_body /api/profile_images/*/*/upload {
                max_size 1MB
              }
              request_body {
                max_size 4MB
              }
              import proxy "lms:8000"
            }
          openedx-cms-production-settings: |
            ALLOWED_HOSTS = ["*"]
            ALLOWED_AUTH_APPLICATIONS = ['cms-sso', 'cms-sso-dev']
          openedx-lms-production-settings: |
            ALLOWED_HOSTS = ["*"]
            ALLOWED_AUTH_APPLICATIONS = ['cms-sso', 'cms-sso-dev']
        EOF
        tutor plugins enable patches
      shell: bash

    - name: Install Plugin
      run: |
        tutor local exec lms pip install -e /openedx/$INPUT_APP_NAME
        tutor local exec cms pip install -e /openedx/$INPUT_APP_NAME
      shell: bash
      env:
        INPUT_APP_NAME: ${{ inputs.app_name }}

    - name: Install Extra Requirements
      if: ${{ inputs.extra_requirements }}
      run: |
        tutor local exec lms pip install $INPUT_EXTRA_REQUIREMENTS
        tutor local exec cms pip install $INPUT_EXTRA_REQUIREMENTS
      shell: bash
      env:
        INPUT_EXTRA_REQUIREMENTS: ${{ inputs.extra_requirements }}

    - name: Run Migrations
      run: |
        tutor local exec lms python manage.py lms migrate
        tutor local exec cms python manage.py cms migrate
      shell: bash

    - name: Load Fixtures
      run: |
        tutor local dc cp $INPUT_FIXTURES_FILE lms:/openedx/$INPUT_FIXTURES_FILE
        tutor local exec lms python manage.py lms loaddata /openedx/$INPUT_FIXTURES_FILE
      shell: bash
      env:
        INPUT_FIXTURES_FILE: ${{ inputs.app_name }}/${{ inputs.fixtures_file }}

    - name: Restart Services
      run: |
        tutor local restart
      shell: bash

    - name: Curl Heartbeat
      run: |
        echo "Curling the heartbeat"
        curl http://$LMS_HOST/heartbeat
      shell: bash

    - name: Curl eox-info
      run: |
        echo "Curling the eox-info"
        curl http://$LMS_HOST/$INPUT_APP_NAME/eox-info
      shell: bash
      env:
        INPUT_APP_NAME: ${{ inputs.app_name }}

    - name: Curl Access Token
      run: |
        echo "Curling the access token"
        curl -X POST http://$LMS_HOST/oauth2/access_token -d "client_id=client_id" -d "client_secret=client_secret" -d "grant_type=client_credentials"
      shell: bash

    - name: Run Bash Script
      if: ${{ inputs.shell_file_to_run }}
      run: bash $INPUT_SHELL_FILE
      shell: bash
      env:
        INPUT_SHELL_FILE: ${{ inputs.app_name }}/${{ inputs.shell_file_to_run }}
