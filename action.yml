name: Open edX Plugin Integration Tests with Tutor
description: "A Github action to test your plugin in Tutor (Open edX distribution)"
inputs:
  app_name:
    description: "Application name to test. E.g., eox-tenant."
    required: true
  tutor_version:
    description: "The tutor version matrix to use."
    required: true
  shell_file_to_run:
    description: "The path of the shell file to run the integration tests."
    required: true
  openedx_extra_pip_requeriments:
    description: "Optional extra pip requirements to install in Open edX. E.g: 'package1==1.0 package2>=2.0'"
    required: false
    default: ""
  python_version:
    description: "The Python version to use for running the tests."
    required: false
    default: "3.11"
  fixtures_file:
    description: "Optional path to the plugin's fixtures file to load."
    required: false
  openedx_imports_test_file_path:
    description: "Path to the file that contains the test function for validating Open edX imports. This should be a Python file within your project."
    required: false
  openedx_imports_test_function_name:
    description: "Name of the function in the specified file that executes the import tests for Open edX."
    required: false

runs:
  using: "composite"
  steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        path: ${{ inputs.app_name }}

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ inputs.python_version }}

    - name: Set Tutor environment variables
      run: |
        echo "LMS_HOST=local.edly.io" >> "$GITHUB_ENV"
        echo "CMS_HOST=studio.local.edly.io" >> "$GITHUB_ENV"
        echo "TUTOR_ROOT=$(pwd)" >> "$GITHUB_ENV"
        echo "TUTOR_PLUGINS_ROOT=$(pwd)/plugins/" >> "$GITHUB_ENV"
      shell: bash

    - name: Install and prepare Tutor
      run: |
        pip install "tutor${{ inputs.tutor_version }}"
        tutor config save --set LMS_HOST=$LMS_HOST --set CMS_HOST=$CMS_HOST
        chmod 777 . -R
        tutor local launch -I
      shell: bash

    - name: Configure Caddyfile and Open edX settings
      run: |
        mkdir -p plugins
        cat << 'EOF' > plugins/patches.yml

        name: patches
        patches:
          caddyfile: |
            {$default_site_port} {
              import proxy "lms:8000"
            }
          openedx-cms-production-settings: |
            ALLOWED_HOSTS = ["*"]
            ALLOWED_AUTH_APPLICATIONS = ['cms-sso', 'cms-sso-dev']
          openedx-lms-production-settings: |
            ALLOWED_HOSTS = ["*"]
            ALLOWED_AUTH_APPLICATIONS = ['cms-sso', 'cms-sso-dev']
        EOF
        tutor plugins enable patches
      shell: bash

    - name: Add mount for plugin
      run: |
        tutor mounts add "lms:$GITHUB_WORKSPACE/${{ inputs.app_name }}:/openedx/${{ inputs.app_name }}"
        tutor mounts add "cms:$GITHUB_WORKSPACE/${{ inputs.app_name }}:/openedx/${{ inputs.app_name }}"
      shell: bash

    - name: Restart Tutor services to apply mounts
      run: |
        tutor local stop
        tutor local start -d
      shell: bash

    - name: Install plugin as an editable package
      if: ${{ inputs.fixtures_file }}
      run: |
        echo "Copying plugin to the LMS folder"
        #tutor local dc cp "$GITHUB_WORKSPACE/${{ inputs.app_name }}" lms:/openedx/

        tutor local exec lms pip install -e /openedx/${{ inputs.app_name }}/
      shell: bash

    - name: Install extra requirements
      run: |
        tutor local exec lms pip install ${{ inputs.openedx_extra_pip_requeriments }}
        tutor local exec cms pip install ${{ inputs.openedx_extra_pip_requeriments }}
      shell: bash

    - name: Run migrations
      run: |
        tutor local exec lms python manage.py lms migrate
        tutor local exec cms python manage.py cms migrate
        tutor local restart
      shell: bash

    - name: Test Open edX imports in plugin
      if: ${{ inputs.openedx_imports_test_file_path && inputs.openedx_imports_test_function_name }}
      run: |
        echo "Running test for Open edX imports"
        tutor local exec --env PYTHONPATH=/openedx/${{ inputs.app_name }} \
                        --env DJANGO_SETTINGS_MODULE=lms.envs.production \
                        lms python -c "
        import os
        import django
        import importlib.util
        django.setup()

        file_path = '/openedx/${{ inputs.app_name }}/${{ inputs.openedx_imports_test_file_path }}'
        function_name = '${{ inputs.openedx_imports_test_function_name }}'

        # Load the module from the file path
        spec = importlib.util.spec_from_file_location('test_module', file_path)
        module = importlib.util.module_from_spec(spec)
        spec.loader.exec_module(module)

        func = getattr(module, function_name)
        func()
        "
      shell: bash

    - name: Load inital data for the tests
      if: ${{ inputs.fixtures_file }}
      run: |
        echo "Copying fixtures file to the LMS container"
        tutor local exec lms python manage.py lms loaddata /openedx/${{ inputs.app_name }}/${{ inputs.fixtures_file }}
      shell: bash

    - name: Curl Heartbeat
      run: |
        echo "Curling LMS heartbeat"
        status_code=$(curl -s -o /dev/null -w "%{http_code}" http://$LMS_HOST/heartbeat)
        if [ "$status_code" -ne 200 ]; then
          echo "Error: LMS Heartbeat endpoint returned status code $status_code"
          exit 1  # Exit with non-zero code to fail the workflow
        else
          echo "Heartbeat endpoint returned status code 200"
        fi
      shell: bash

    - name: Run integration tests
      if: ${{ inputs.shell_file_to_run }}
      run: |
        echo "Creating isolated venv to run the tests"
        python -m venv .venv
        source .venv/bin/activate
        cd ${{ inputs.app_name }}
        chmod +x ./${{ inputs.shell_file_to_run }}
        ./${{ inputs.shell_file_to_run }}
      shell: bash
